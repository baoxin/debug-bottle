apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply from: '../gradle-mvn-push.gradle'

def libs = rootProject.libraries

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    buildToolsVersion '25.0.0'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "org.jetbrains.kotlin:kotlin-stdlib:${libs.kotlin}"
    compile project(':blockcanary')
    compile project(':views')
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libs.leakcanary}"
    testCompile "junit:junit:${libs.junit}"
    compile "com.squareup.leakcanary:leakcanary-android:${libs.leakcanary}"
    provided "com.squareup.okhttp:okhttp:${libs.okhttp}"
    provided "com.squareup.okhttp3:okhttp:${libs.okhttp3}"
    provided "com.android.support:appcompat-v7:${libs.support}"
}

repositories {
    mavenCentral()
}

task setVersionInfo << {
    println 'Set version code start!'

    def file = new File(rootDir, 'components/src/main/kotlin/com/exyui/android/debugbottle/components/VersionCtrl.kt')
    def versionCode = rootProject.versionCode
    def versionName = rootProject.versionName

    file.withWriter('utf-8') { writer ->
        writer.writeLine 'package com.exyui.android.debugbottle.components'
        writer.writeLine ''
        writer.writeLine '/**'
        writer.writeLine " * Created by machine on ${new Date().format('yyyy-MM-dd')}"
        writer.writeLine ''
        writer.writeLine ' * This file is generated automatically, DO NOT modify!!!'
        writer.writeLine ' */'
        writer.writeLine ''
        writer.writeLine "const val __DT_VERSION_CODE = $versionCode"
        writer.writeLine "const val __DT_VERSION_NAME = \"$versionName\""
        writer.writeLine "const val __DT_BUILD_NUM = ${rootProject.buildCode}"
    }
    println 'Set version code done!'
}

preBuild.dependsOn setVersionInfo
